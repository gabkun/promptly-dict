
  useEffect(() => {
    const storedUserId = localStorage.getItem('userId');
    console.log(localStorage); // Check the contents of localStorage
    if (storedUserId) {
      const fetchUserData = async () => {
        try {
          const response = await axiosInstance.get(`/api/auth/${storedUserId}`);
          setFormData((prev) => ({ ...prev, userId: response.data.user.id }));
        } catch (err) {
          setError('Failed to fetch user data. Please try again later.');
        }
      };
      fetchUserData();
    } else {
      console.error('No user ID found in localStorage.');
      setError('No user ID found. Please log in again.');
    }
  }, []);



  import React, { useState } from 'react';
import axiosInstance from '../../api/axiosConfig'; 
import { useNavigate } from 'react-router-dom';

const Login: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
  
    try {
      console.log('Attempting login with:', { email, password });
      const response = await axiosInstance.post('/api/auth/login', { email, password });
  
      console.log('Login response:', response.data);
      const userId = response?.data?.user?.id; 
      const role = response?.data?.user?.role; 
  
      console.log('User ID received:', userId);
      console.log('Role received:', role);
  
      if (userId) {
        localStorage.setItem('userId', userId);
      }
  
      if (role === 'admin') {
        console.log('Navigating to admin dashboard');
        navigate('/admindashboard');
      } else if (role === 'user') {
        console.log('Navigating to user dashboard');
        navigate('/dashboard');
      } else {
        console.warn('Unhandled role:', role);
      }
  
      alert('Login successful!');
    } catch (err: any) {
      console.error('Login error:', err.response || err.message);
      setError(err.response?.data?.error || 'An error occurred during login.');
    }
  };


  const SignupPage: React.FC = () => {
    const [formData, setFormData] = useState({
      name: '',
      email: '',
      password: '',
      role: 'user', // default role
    });
    const [error, setError] = useState<string | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const navigate = useNavigate();
  
    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
      const { name, value } = e.target;
      setFormData({ ...formData, [name]: value });
    };
  
    const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      setLoading(true);
      setError(null);
  
      try {
        const response = await AxiosInstance.post('/api/auth/register', formData);
        // If signup is successful, redirect to login page or dashboard
        navigate('/login');
        alert(response.data.message); // You can replace this with a success message display
      } catch (err: any) {
        setError(err.response?.data?.error || 'An error occurred');
      } finally {
        setLoading(false);
      }
    };
  